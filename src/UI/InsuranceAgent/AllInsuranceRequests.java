/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.InsuranceAgent;

import NUHealthCare.Account.Account;
import NUHealthCare.Enterprise.Enterprise;
import NUHealthCare.JobQueue.InsuranceJob;
import NUHealthCare.JobQueue.JobRequest;
import NUHealthCare.Org.InsuranceAgentOrg;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rishabh,Uday,Aditi
 */
public class AllInsuranceRequests extends javax.swing.JPanel {

    /**
     * Creates new form AllInsuranceRequests
     */
    private JPanel userProcessContainer;
    private Account account;
    private Enterprise enterprise;
    private InsuranceAgentOrg insuranceAgentOrg;
    public AllInsuranceRequests(JPanel userProcessContainer, Account account, Enterprise enterprise, InsuranceAgentOrg insuranceAgentOrg) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.insuranceAgentOrg = insuranceAgentOrg;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInsuranceWorkTables = new javax.swing.JTable();
        btnProcessRequests = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnAssignToMe = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Process Requests");

        tblInsuranceWorkTables.setBackground(new java.awt.Color(204, 204, 204));
        tblInsuranceWorkTables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PolicyNumber", "Patient Name", "Health Center", "Sender ", "Receiver Agent", "Billing Amount", "Claim Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblInsuranceWorkTables);

        btnProcessRequests.setBackground(new java.awt.Color(153, 0, 0));
        btnProcessRequests.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnProcessRequests.setForeground(new java.awt.Color(255, 255, 255));
        btnProcessRequests.setText("Process Request");
        btnProcessRequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessRequestsActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAssignToMe.setBackground(new java.awt.Color(153, 0, 0));
        btnAssignToMe.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAssignToMe.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignToMe.setText("Assign To Me");
        btnAssignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMeActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/Assets/NU_Health_footer.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(15, 15, 15))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnAssignToMe)
                                .addGap(119, 119, 119)
                                .addComponent(btnProcessRequests)
                                .addGap(397, 397, 397))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAssignToMe, btnProcessRequests});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnBack)
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProcessRequests, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssignToMe, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAssignToMe, btnProcessRequests});

    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessRequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessRequestsActionPerformed
      int selectedRow = tblInsuranceWorkTables.getSelectedRow();
      InsuranceJob insuranceJob;

      if (selectedRow < 0) {
        JOptionPane.showMessageDialog(null, "Please select a row");
        return;
      } else {
        insuranceJob = (InsuranceJob) tblInsuranceWorkTables.getValueAt(
            selectedRow, 0);

        if (insuranceJob.getStatus().
            equals("Rejected")) {
          JOptionPane.showMessageDialog(null,
              "Cannot process a Rejected Request", "Warning!",
              JOptionPane.WARNING_MESSAGE);
          return;
        }
        if (insuranceJob.getStatus().
            equalsIgnoreCase("Sent to Secretary")) {
          JOptionPane.showMessageDialog(null, "Request already processed",
              "Warning!", JOptionPane.WARNING_MESSAGE);
          return;
        }
        if (insuranceJob.getStatus().
            equalsIgnoreCase("Sent")) {
          JOptionPane.showMessageDialog(null, "Assign the request first");
          return;
        }
        if (insuranceJob.getStatus().
            equalsIgnoreCase("Sent to Finance Department")) {
          JOptionPane.showMessageDialog(null,
              "Request already sent to Finance department");
          return;
        }
        if (insuranceJob.getStatus().
            equalsIgnoreCase("Insurance Claim Approved")) {
          JOptionPane.showMessageDialog(null,
              "Insurance Claim is already Approved");
          return;
        }

        if (!account.equals(insuranceJob.getReceiver())) {
          JOptionPane.showMessageDialog(null, "Not Authorized", "Warning!",
              JOptionPane.WARNING_MESSAGE);
          return;
        } else {

          CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
          userProcessContainer.add("ProcessRequestJPanel",
              new InsuranceProcessRequest(userProcessContainer, account,
                  enterprise, insuranceJob));
          cardLayout.next(userProcessContainer);
        }
      }
    }//GEN-LAST:event_btnProcessRequestsActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
      userProcessContainer.remove(this);
      CardLayout layout = (CardLayout) userProcessContainer.getLayout();
      layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAssignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMeActionPerformed
      int selectedRow = tblInsuranceWorkTables.getSelectedRow();
      if (selectedRow < 0) {
        JOptionPane.showMessageDialog(null, "Please Select a Row");
        return;
      } else {
        InsuranceJob  insuranceJob =
            (InsuranceJob ) tblInsuranceWorkTables.getValueAt(selectedRow,
                0);
        if (insuranceJob.getStatus().
            equals("Sent")) {
          insuranceJob.setReceiver(account);
          insuranceJob.setStatus("Pending on Agent: " + account.getEmployee().getEmpName());
          
          populateTable();
          
          JOptionPane.showMessageDialog(null, "Success !! Request is assigned to you ");
        } else {
          JOptionPane.showMessageDialog(null,
              "Can't assign this request, as it is in " + insuranceJob.
                  getStatus() + " status", "Warning!",
              JOptionPane.WARNING_MESSAGE);
        }
      }
    }//GEN-LAST:event_btnAssignToMeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignToMe;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnProcessRequests;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblInsuranceWorkTables;
    // End of variables declaration//GEN-END:variables

  public void populateTable() {
    DefaultTableModel model = (DefaultTableModel) tblInsuranceWorkTables.getModel();

    model.setRowCount(0);

    for (JobRequest request : insuranceAgentOrg.getJobQueue().getJobRequestList()) {
      Object[] row = new Object[8];
      String status = request.getStatus();
      row[0] = ((InsuranceJob ) request);
      row[1] = ((InsuranceJob ) request).getInsuranceCustomer().
          getCustomerFName() + " " + ((InsuranceJob ) request).
              getInsuranceCustomer().getCustomerLName();
      row[2] = ((InsuranceJob ) request).getHealthCenter();
      row[3] = request.getSender().getEmployee().getEmpName();
      row[4] = request.getReceiver();
      row[5] = ((InsuranceJob ) request).getBillAmount();
      row[6] = ((InsuranceJob ) request).getClaimAmount();
      row[7] = request.getStatus();

      model.addRow(row);
    }
  }
}
