package UI.SysAdminWorkArea;

import NUHealthCare.Ecosystem;
import NUHealthCare.Enterprise.Enterprise;
import NUHealthCare.JobQueue.AccountsBillingJob;
import NUHealthCare.JobQueue.GovtFundJob;
import NUHealthCare.JobQueue.InsuranceJob;
import NUHealthCare.JobQueue.JobRequest;
import NUHealthCare.JobQueue.OrderJob;
import NUHealthCare.JobQueue.PatientVisitJob;
import NUHealthCare.NetworkSystem.NetworkSystem;
import NUHealthCare.Org.AccountantOrg;
import NUHealthCare.Org.DoctorOrg;
import NUHealthCare.Org.HealthOfficialOrg;
import NUHealthCare.Org.InsuranceAgentOrg;
import NUHealthCare.Org.ManagerOrg;
import NUHealthCare.Org.Org;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Rishabh,Uday,Aditi
 */
public class SysAdminWorkArea extends javax.swing.JPanel {

  /**
   * Creates new form SysAdminWorkArea
   */
  JPanel userProcessContainer;
  Ecosystem ecosystem;
  public SysAdminWorkArea(JPanel userProcessContainer, Ecosystem ecosystem) {
    initComponents();
    this.userProcessContainer = userProcessContainer;
    this.ecosystem = ecosystem;
    populateNetworkSystems();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeNetworkSystems = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        lblNode = new javax.swing.JLabel();
        lblSelectedNode = new javax.swing.JLabel();
        btnManageNetwork = new javax.swing.JButton();
        btnManageEnterprise = new javax.swing.JButton();
        btnManageAdmin = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnViewKPI = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        treeNetworkSystems.setBackground(new java.awt.Color(204, 204, 204));
        treeNetworkSystems.setForeground(new java.awt.Color(255, 255, 255));
        treeNetworkSystems.setMaximumSize(new java.awt.Dimension(130, 64));
        treeNetworkSystems.setPreferredSize(new java.awt.Dimension(130, 64));
        treeNetworkSystems.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeNetworkSystemsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(treeNetworkSystems);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        lblNode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNode.setText("Selected Node:");

        lblSelectedNode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSelectedNode.setText("<View_selected_node>");

        btnManageNetwork.setBackground(new java.awt.Color(153, 0, 0));
        btnManageNetwork.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnManageNetwork.setForeground(new java.awt.Color(255, 255, 255));
        btnManageNetwork.setText("Manage Network");
        btnManageNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageNetworkActionPerformed(evt);
            }
        });

        btnManageEnterprise.setBackground(new java.awt.Color(153, 0, 0));
        btnManageEnterprise.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnManageEnterprise.setForeground(new java.awt.Color(255, 255, 255));
        btnManageEnterprise.setText("Manage Enterprise");
        btnManageEnterprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageEnterpriseActionPerformed(evt);
            }
        });

        btnManageAdmin.setBackground(new java.awt.Color(153, 0, 0));
        btnManageAdmin.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnManageAdmin.setForeground(new java.awt.Color(255, 255, 255));
        btnManageAdmin.setText("Manage Enterprise Admin");
        btnManageAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageAdminActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("System Admin Work Area");

        btnViewKPI.setBackground(new java.awt.Color(153, 0, 0));
        btnViewKPI.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnViewKPI.setForeground(new java.awt.Color(255, 255, 255));
        btnViewKPI.setText("View System KPIs");
        btnViewKPI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewKPIActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/Assets/NU_Health_footer.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnManageNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManageEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManageAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewKPI, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, jPanel2Layout.createSequentialGroup()
                .addGap(199, 199, 199)
                .addComponent(lblNode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSelectedNode)
                .addGap(221, 221, 221))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnManageAdmin, btnManageEnterprise, btnManageNetwork, btnViewKPI});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(60, 60, 60)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNode)
                    .addComponent(lblSelectedNode))
                .addGap(18, 18, 18)
                .addComponent(btnManageNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnManageEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btnManageAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnViewKPI, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addComponent(jLabel1))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnManageAdmin, btnManageEnterprise, btnManageNetwork, btnViewKPI});

        jSplitPane1.setRightComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void treeNetworkSystemsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeNetworkSystemsValueChanged
      DefaultMutableTreeNode selectedNode= (DefaultMutableTreeNode)treeNetworkSystems.getLastSelectedPathComponent();
      if(selectedNode!=null){
          lblSelectedNode.setText(selectedNode.toString());
      }
    }//GEN-LAST:event_treeNetworkSystemsValueChanged

    private void btnManageNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageNetworkActionPerformed
      ManageNetwork manageNetwork = new ManageNetwork(userProcessContainer, ecosystem);
      userProcessContainer.add("manageNetwork", manageNetwork);
      CardLayout layout = (CardLayout)userProcessContainer.getLayout();
      layout.next(userProcessContainer);
    }//GEN-LAST:event_btnManageNetworkActionPerformed

    private void btnManageEnterpriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageEnterpriseActionPerformed
      ManageEnterprises manageEnterprise = new ManageEnterprises(userProcessContainer, ecosystem);
      userProcessContainer.add("manageEnterprises",manageEnterprise);
      CardLayout layout = (CardLayout)userProcessContainer.getLayout();
      layout.next(userProcessContainer);
    }//GEN-LAST:event_btnManageEnterpriseActionPerformed

    private void btnManageAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageAdminActionPerformed
      ManageEnterpriseAdmins manageEnterpriseAdmin = new ManageEnterpriseAdmins(userProcessContainer, ecosystem);
      userProcessContainer.add("manageEnterpriseAdmin",manageEnterpriseAdmin);
      CardLayout layout=(CardLayout)userProcessContainer.getLayout();
      layout.next(userProcessContainer);
    }//GEN-LAST:event_btnManageAdminActionPerformed

    private void btnViewKPIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewKPIActionPerformed
        // TODO add your handling code here:
      int treatmentCount = 0, progressCount = 0, billComplete = 0, billProgress = 0, insuranceComplete = 0,
          insprogress = 0, fundscomplete = 0, fundsprogress = 0, ordercomplete =
          0, orderprogress = 0;
      DefaultCategoryDataset dataset = new DefaultCategoryDataset();
      for (NetworkSystem net : ecosystem.getNetworkSystems()) {
        for (Enterprise enter : net.getEnterpriseDirectory().
            getEnterpriseList()) {

          for (Org org : enter.getOrgDirectory().getOrganizations()) {
            //Patient visits
            if (org instanceof DoctorOrg) {
              for (JobRequest request : org.getJobQueue().getJobRequestList()) {
                if (((PatientVisitJob) request).getIsComplete()) {
                  treatmentCount++;
                } else {
                  progressCount++;
                }
              }
            }
            //Billing requests
            if (org instanceof AccountantOrg) {
              for (JobRequest request : org.getJobQueue().
                  getJobRequestList()) {
                if (((AccountsBillingJob) request).getStatus().
                    equals("Patient Transaction Completed")) {
                  billComplete++;
                } else {
                  billProgress++;
                }
              }
            }
            // Insurance claims
            if (org instanceof InsuranceAgentOrg) {
              for (JobRequest request : org.getJobQueue().
                  getJobRequestList()) {
                if (((InsuranceJob) request).getStatus().
                    equals("Insurance Claim Approved")) {
                  insuranceComplete++;
                } else {
                  insprogress++;
                }
              }
            }
            //Funds requests
            if (org instanceof HealthOfficialOrg) {
              for (JobRequest request : org.getJobQueue().
                  getJobRequestList()) {
                if (((GovtFundJob) request).getStatus().
                    equals("Accepted")) {
                  fundscomplete++;
                } else {
                  fundsprogress++;
                }
              }
            }
            //Order requests
            if (org instanceof ManagerOrg) {
              for (JobRequest request : org.getJobQueue().
                  getJobRequestList()) {
                if (((OrderJob) request).getStatus().
                    equals("Accepted")) {
                  ordercomplete++;
                } else {
                  orderprogress++;
                }
              }
            }
          }
        }
        dataset.addValue(treatmentCount, net.getName(), "Visit Completed");
        dataset.addValue(progressCount, net.getName(), "VIsit Not Completed");
        dataset.addValue(billComplete, net.getName(), "Billing Completed");
        dataset.addValue(billProgress, net.getName(), "Billing Not Completed");
        dataset.addValue(insuranceComplete, net.getName(), "Claim Completed");
        dataset.addValue(insprogress, net.getName(), "Claim Not Completed");
        dataset.addValue(fundscomplete, net.getName(), "Funds Completed");
        dataset.addValue(fundsprogress, net.getName(), "Funds Not Completed");
        dataset.addValue(ordercomplete, net.getName(), "Orders Completed");
        dataset.addValue(orderprogress, net.getName(), "Orders Not Completed");

        treatmentCount = 0;
        progressCount = 0;
        billComplete = 0;
        billProgress = 0;
        insuranceComplete = 0;
        insprogress = 0;
        fundscomplete = 0;
        fundsprogress = 0;
        ordercomplete = 0;
        orderprogress = 0;

      }

      final JFreeChart chart = ChartFactory.createBarChart(
          "ECOSYSTEM", // Title
          "JOB QUEUE", // Domain Axis
          "Value", // Range Axis
          dataset, // data
          PlotOrientation.HORIZONTAL,
          true, // Legend
          true, // Tooltips
          false // URLs
      );
      // set the range axis to display integers only...
      final CategoryPlot plot = chart.getCategoryPlot();
      final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
      rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
      //plot chart
      ChartFrame frame = new ChartFrame("NUHealthCare KPIs ", chart);

      frame.setVisible(true);
      frame.setSize(1000, 700);
    }//GEN-LAST:event_btnViewKPIActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnManageAdmin;
    private javax.swing.JButton btnManageEnterprise;
    private javax.swing.JButton btnManageNetwork;
    private javax.swing.JButton btnViewKPI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblNode;
    private javax.swing.JLabel lblSelectedNode;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTree treeNetworkSystems;
    // End of variables declaration//GEN-END:variables

  public void populateNetworkSystems() {
    DefaultTreeModel model = (DefaultTreeModel)treeNetworkSystems.getModel();
    ArrayList<NetworkSystem> networkList = ecosystem.getNetworkSystems();
    ArrayList<Enterprise> enterpriseList;
    ArrayList<Org> orgList;

    NetworkSystem ns;
    Enterprise enterprise;
    Org org;

    DefaultMutableTreeNode networkSystems = new DefaultMutableTreeNode("Network Systems");
    DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
    root.removeAllChildren();
    root.insert(networkSystems, 0);

    DefaultMutableTreeNode nsNode;
    DefaultMutableTreeNode enterpriseNode;
    DefaultMutableTreeNode orgNode;

    for(int i = 0;i < networkList.size(); i++) {
      ns=networkList.get(i);
      nsNode=new DefaultMutableTreeNode(ns.getName());
      networkSystems.insert(nsNode, i);
            
      enterpriseList = ns.getEnterpriseDirectory().getEnterpriseList();
        for(int j = 0; j < enterpriseList.size(); j++) {
            enterprise = enterpriseList.get(j);
            enterpriseNode = new DefaultMutableTreeNode(enterprise.getOrgName());
            nsNode.insert(enterpriseNode, j);

            orgList = enterprise.getOrgDirectory().getOrganizations();
            for(int k = 0; k < orgList.size(); k++) {
                org = orgList.get(k);
                orgNode = new DefaultMutableTreeNode(org.getOrgName());
                enterpriseNode.insert(orgNode, k);
            }
          }
        }
      model.reload();
  }
}
