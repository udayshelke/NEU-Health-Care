/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.SysAdminWorkArea;

import NUHealthCare.Ecosystem;
import NUHealthCare.Enterprise.Enterprise;
import NUHealthCare.Map.MapViewer;
import NUHealthCare.NetworkSystem.NetworkSystem;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rishabh,Uday,Aditi
 */
public class ManageEnterprises extends javax.swing.JPanel {

    /**
     * Creates new form ManageEnterprises
     */
    private JPanel userProcessContainer;
    private Ecosystem ecosystem;

    public ManageEnterprises(JPanel userProcessContainer, Ecosystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;

        populateCombo();
        populateEnterpriseTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblEnterprise = new javax.swing.JTable();
        lblNetwork = new javax.swing.JLabel();
        cbNetwork = new javax.swing.JComboBox();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblEnterprise = new javax.swing.JLabel();
        cbEnterprise = new javax.swing.JComboBox();
        btnSubmit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        txtAddress = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        btnMap = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblEnterprise.setBackground(new java.awt.Color(204, 204, 204));
        tblEnterprise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Enterprise Name", "Network", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblEnterprise);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 170, 561, 220));

        lblNetwork.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblNetwork.setText("Network");
        add(lblNetwork, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 470, -1, -1));

        add(cbNetwork, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 470, 136, -1));

        lblName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblName.setText("Name");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 570, -1, -1));
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 570, 136, -1));

        lblEnterprise.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEnterprise.setText("Enterprise Type");
        add(lblEnterprise, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 520, -1, -1));

        add(cbEnterprise, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 520, 136, -1));

        btnSubmit.setBackground(new java.awt.Color(153, 0, 0));
        btnSubmit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSubmit.setForeground(new java.awt.Color(255, 255, 255));
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 660, 100, 50));

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 10, -1, -1));

        lblTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTitle.setText("Manage Enterprise ");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 100, -1, -1));

        btnDelete.setBackground(new java.awt.Color(153, 0, 0));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 400, -1, 34));
        add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 610, 138, -1));

        lblAddress.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAddress.setText("Address");
        add(lblAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 610, -1, -1));

        btnMap.setBackground(new java.awt.Color(153, 0, 0));
        btnMap.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnMap.setForeground(new java.awt.Color(255, 255, 255));
        btnMap.setText("View on Map");
        btnMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMapActionPerformed(evt);
            }
        });
        add(btnMap, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 610, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

  private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] cmpArr = userProcessContainer.getComponents();
        Component component = cmpArr[cmpArr.length - 1];
        SysAdminWorkArea sysAdmin = (SysAdminWorkArea) component;
        sysAdmin.populateNetworkSystems();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
  }//GEN-LAST:event_btnBackActionPerformed

  private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEnterprise.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to be deleted, from the table!", "Warning!", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            Enterprise e = (Enterprise) tblEnterprise.getValueAt(selectedRow, 0);
            int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this entry?");
            if (confirmation == JOptionPane.YES_OPTION) {
                NetworkSystem ns = (NetworkSystem) tblEnterprise.getValueAt(selectedRow, 1);
                ns.getEnterpriseDirectory().getEnterpriseList().remove(e);
                populateEnterpriseTable();
                JOptionPane.showMessageDialog(null, "Selected enterprise deletion successful");
            }
        }
  }//GEN-LAST:event_btnDeleteActionPerformed

  private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        NetworkSystem ns = (NetworkSystem) cbNetwork.getSelectedItem();
        Enterprise.EnterpriseType type = (Enterprise.EnterpriseType) cbEnterprise.getSelectedItem();
        int zipcode = ns.getZipcode();

        if (ns == null || type == null) {
            JOptionPane.showMessageDialog(null, "Invalid Input!");
            return;
        } else {
            String enterpriseName = txtName.getText().trim();
//            ArrayList<String> ename = new ArrayList<String>();
//            int num = cbNetwork.getItemCount();
//
//            // Get items
//            for (int i = 0; i < num; i++) {
//                Object item = cbNetwork.getItemAt(i);
//                ename.add(item.toString());
//                System.out.println(item.toString());
//            }
//      for (NetworkSystem n : cbNetwork.)
            String enterpriseAddr = txtAddress.getText().trim();
            List<Enterprise> enterprises = ns.getEnterpriseDirectory().getEnterpriseList();
            List<String> names = new ArrayList<>();
            List<String> types = new ArrayList<>();
            for (Enterprise enterprise : enterprises) {
                names.add(enterprise.getOrgName());
                types.add(enterprise.getEnterpriseType().toString());
            }
            if ((types.contains(type.toString())
                    && ((type.toString().equals("Government"))))) {
                JOptionPane.showMessageDialog(null, "This type of enterprise already exists!",
                        "Warning!", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (names.contains(enterpriseName)) {
                JOptionPane.showMessageDialog(null, "This type of enterprise already exists",
                        "Warning!", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (enterpriseName.equals("") || enterpriseName == null) {
                JOptionPane.showMessageDialog(null, "Do not leave the name field empty!");
                return;
            } else {
                if (enterpriseAddr.equals("") || enterpriseAddr == null) {
                    JOptionPane.showMessageDialog(null, "Do not leave the address field empty!");
                    return;
                } else {
                    Enterprise enterprise = ns.getEnterpriseDirectory().
                            createAndAddEnterprise(enterpriseName, type, zipcode, enterpriseAddr);

                    populateEnterpriseTable();
                    JOptionPane.showMessageDialog(null, "Successfully added the enterprise!");
                    txtName.setText("");
                    txtAddress.setText("");
                }
            }
        }
  }//GEN-LAST:event_btnSubmitActionPerformed

  private void btnMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMapActionPerformed
        // TODO add your handling code here:
        if (txtAddress.getText().
                trim().
                isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter address first");
        } else {
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    MapViewer browser = new MapViewer();
                    browser.setVisible(true);
                    browser.loadURL("https://www.google.com/maps/search/?api=1&query="
                            + txtAddress.getText().
                                    trim());
                }
            });
        }
  }//GEN-LAST:event_btnMapActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMap;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox cbEnterprise;
    private javax.swing.JComboBox cbNetwork;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblEnterprise;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNetwork;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblEnterprise;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void populateCombo() {
        cbNetwork.removeAllItems();
        cbEnterprise.removeAllItems();

        // Populate Network combo box
        for (NetworkSystem ns : ecosystem.getNetworkSystems()) {
            cbNetwork.addItem(ns);
        }
        // Populate Enterprise combo box
        for (Enterprise.EnterpriseType type : Enterprise.EnterpriseType.values()) {
            cbEnterprise.addItem(type);
        }
    }

    private void populateEnterpriseTable() {
        DefaultTableModel model = (DefaultTableModel) tblEnterprise.getModel();
        model.setRowCount(0);
        for (NetworkSystem ns : ecosystem.getNetworkSystems()) {
            for (Enterprise e : ns.getEnterpriseDirectory().getEnterpriseList()) {
                Object[] row = new Object[3];
                row[0] = e;
                row[1] = ns;
                row[2] = e.getEnterpriseType().getValue();

                model.addRow(row);
            }
        }
    }
}
