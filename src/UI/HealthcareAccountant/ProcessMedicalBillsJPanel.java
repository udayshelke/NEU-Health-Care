/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.HealthcareAccountant;

import javax.swing.JPanel;


import NUHealthCare.Ecosystem;
import NUHealthCare.Enterprise.Enterprise;
import NUHealthCare.Org.AccountantOrg;
import NUHealthCare.Account.Account;
import NUHealthCare.JobQueue.AccountsBillingJob;
import NUHealthCare.JobQueue.GovtFundJob;
import NUHealthCare.JobQueue.InsuranceJob;
import NUHealthCare.JobQueue.JobRequest;
import UI.PharmacyManager.SendEmailJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Rishabh,Uday,Aditi
 */
public class ProcessMedicalBillsJPanel extends javax.swing.JPanel {

    
    
    private JPanel userProcessContainer;
    private Account account;
    private Enterprise enterprise;
    private AccountantOrg accountantOrg;
    private Ecosystem ecosystem;
    /**
     * Creates new form PrrocessMedicalBillsJPanel
     */
    public ProcessMedicalBillsJPanel(JPanel userProcessContainer, Account account, Enterprise enterprise, AccountantOrg accountantOrg, Ecosystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.accountantOrg = accountantOrg;
        this.ecosystem = ecosystem;
         populateTable();
        populateInsuranceClaimTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnEmail = new javax.swing.JButton();
        btnProcessRequest = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkRequest = new javax.swing.JTable();
        btnAssignToMe = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblInsurance = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Insurance Claim Status Table");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Patient Billing Table");

        btnEmail.setBackground(new java.awt.Color(153, 0, 0));
        btnEmail.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnEmail.setForeground(new java.awt.Color(255, 255, 255));
        btnEmail.setText("Send Email for Query");
        btnEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmailActionPerformed(evt);
            }
        });

        btnProcessRequest.setBackground(new java.awt.Color(153, 0, 0));
        btnProcessRequest.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnProcessRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnProcessRequest.setText("Process Request");
        btnProcessRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessRequestActionPerformed(evt);
            }
        });

        tblWorkRequest.setBackground(new java.awt.Color(204, 204, 204));
        tblWorkRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PatientId", "Patient Name", "Assigned Doctor", "Accountant ", "Status", "Billing Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblWorkRequest);

        btnAssignToMe.setBackground(new java.awt.Color(153, 0, 0));
        btnAssignToMe.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAssignToMe.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignToMe.setText("AssignToMe");
        btnAssignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMeActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Accountant: Patient Billing Area");

        tblInsurance.setBackground(new java.awt.Color(204, 204, 204));
        tblInsurance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Policy Number", "Accountant", "Insurance Agent", "Billing Amount", "Claim Amount", "Claim Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblInsurance);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/Assets/NU_Health_footer.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(17, 17, 17))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addComponent(jLabel2)
                        .addGap(0, 676, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1210, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(402, 402, 402)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addComponent(btnAssignToMe)
                        .addGap(103, 103, 103)
                        .addComponent(btnProcessRequest))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(493, 493, 493)
                        .addComponent(btnEmail)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnBack)
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAssignToMe, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcessRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmailActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblWorkRequest.getSelectedRow();
        String to;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from patient billing table!");
            return;
        } else {
            
            AccountsBillingJob ins = (AccountsBillingJob) tblWorkRequest.getValueAt(selectedRow, 5);
            to= ins.getPatient().getPatientEmail();
            SendEmailJPanel emailJPanel = new SendEmailJPanel(userProcessContainer,to,"Account");
            userProcessContainer.add("emailJPanel", emailJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        
    }//GEN-LAST:event_btnEmailActionPerformed

    private void btnProcessRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessRequestActionPerformed
        // TODO add your handling code here:
          int selectedRow = tblWorkRequest.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row !");
            return;
        } else {

            AccountsBillingJob accountBillingRequest = (AccountsBillingJob) tblWorkRequest.getValueAt(selectedRow, 5);

            if (accountBillingRequest.getReceiver() != null) {
                if (accountBillingRequest.getReceiver().equals(account)) {
                    if(accountBillingRequest.getStatus().equalsIgnoreCase("Pending on Accountant"))
                    {
                    AccountantProcessRequestJPanel panel = new AccountantProcessRequestJPanel(userProcessContainer, account, accountBillingRequest, enterprise, ecosystem);
                    userProcessContainer.add("AccountantProcessRequestJPanel", panel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Cannot process Request as request is in  " + accountBillingRequest.getStatus());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Not authorised!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please assign the request first!");
            }
        }
        
        //        }
    }//GEN-LAST:event_btnProcessRequestActionPerformed

    private void btnAssignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMeActionPerformed
     
                int selectedRow = tblWorkRequest.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row !");
            return;
        } else {
            JobRequest request = (AccountsBillingJob) tblWorkRequest.getValueAt(selectedRow, 5);
            if (request.getReceiver() == null) {

                request.setReceiver(account);
                request.setStatus("Pending on Accountant");
                populateTable();
                JOptionPane.showMessageDialog(null, "Request succesfully assigned to you!");
//             else {
//                JOptionPane.showMessageDialog(null, "Can't assign this work request, as the work request is in " + request.getStatus() + " status");
//            }
            } else {
                JOptionPane.showMessageDialog(null, "The request is already assigned ");
            }
        }

        
    }//GEN-LAST:event_btnAssignToMeActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
           userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignToMe;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnEmail;
    private javax.swing.JButton btnProcessRequest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblInsurance;
    private javax.swing.JTable tblWorkRequest;
    // End of variables declaration//GEN-END:variables
public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblWorkRequest.getModel();

        model.setRowCount(0);

        for (JobRequest request : accountantOrg.getJobQueue().getJobRequestList()) {
            Object[] row = new Object[6];
            String status = request.getStatus();
            row[0] = ((AccountsBillingJob) request).getPatient();
            row[1] = ((AccountsBillingJob) request).getPatient().getPatientFName() + " " + ((AccountsBillingJob) request).getPatient().getPatientLName();
            row[2] = request.getSender().getEmployee().getEmpName();
            if (status.equalsIgnoreCase("Sent to Treasurer") || status.equalsIgnoreCase("Sent to Secretary")) {
                row[2] = null;
            } else {
                row[3] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getEmpName();
            }
            //row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[4] = request.getStatus();
            row[5] = ((AccountsBillingJob) request);

            model.addRow(row);
        }

    }

    public void populateInsuranceClaimTable() {
        List<InsuranceJob> insuranceWorkRequests = new ArrayList<>();
        ArrayList<JobRequest> workRequests = account.getJobQueue().getJobRequestList();
        for(JobRequest workRequest : workRequests)
        {
            if(workRequest instanceof InsuranceJob)
            {
                insuranceWorkRequests.add((InsuranceJob) workRequest);
            }
        }
        
        DefaultTableModel model = (DefaultTableModel) tblInsurance.getModel();
        
        model.setRowCount(0);
        for(InsuranceJob insuranceWorkRequest: insuranceWorkRequests)
        {
            Object[] row = new Object[6];
         row[0]=insuranceWorkRequest;
         row[1] = account.getEmployee().getEmpName();
         row[2] = insuranceWorkRequest.getReceiver()==null?"":insuranceWorkRequest.getReceiver().getEmployee().getEmpName();
         row[3] = insuranceWorkRequest.getBillAmount();
         row[4] = insuranceWorkRequest.getClaimAmount();
         row[5] = insuranceWorkRequest.getStatus();
         model.addRow(row);
            
        }
        //System.out.println("Insur"+ insuranceWorkRequests.size());
    }


}
