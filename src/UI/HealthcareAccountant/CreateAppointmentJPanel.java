/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.HealthcareAccountant;

import NUHealthCare.Account.Account;
import NUHealthCare.Ecosystem;
import NUHealthCare.Enterprise.HealthCareEnterprise;
import NUHealthCare.Enterprise.Enterprise;
import NUHealthCare.Enterprise.InsuranceCompanyEnterprise;
import NUHealthCare.Insurance.Insurance;
import NUHealthCare.InsuranceCustomer.InsuranceCustomer;
import NUHealthCare.JobQueue.PatientVisitJob;
import NUHealthCare.Map.MapViewer;
import NUHealthCare.NetworkSystem.NetworkSystem;
import NUHealthCare.Org.DoctorOrg;
import NUHealthCare.Org.Org;
import NUHealthCare.Patient.Patient;
import NUHealthCare.Role.*;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.github.sarxos.webcam.WebcamUtils;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author Rishabh,Uday,Aditi
 */
public class CreateAppointmentJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Account account;
    private Enterprise enterprise;
    private Ecosystem ecosystem;
    private String patientId;
    private Patient cus;

    /**
     * Creates new form CreateAppointmentJPanel
     */
    public CreateAppointmentJPanel(JPanel userProcessContainer, Account account, Enterprise enterprise, Ecosystem ecoSystem, String patientId) {
        initComponents();
        this.account = account;
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.ecosystem = ecoSystem;
        this.patientId = patientId;
        btnUpdate.setEnabled(false);
        populateField();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtPatientSSN = new javax.swing.JTextField();
        btnFindPatients = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtSSN = new javax.swing.JTextField();
        txtHomePhone = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        rbtnMale = new javax.swing.JRadioButton();
        rbtnFemale = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        rbtnPatientInsuranceYes = new javax.swing.JRadioButton();
        rbtnPatientInsuranceNo = new javax.swing.JRadioButton();
        lblHavePolicy = new javax.swing.JLabel();
        lblPolicyName = new javax.swing.JLabel();
        lblInsCompany = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        txtReasonForVisit = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        lblPolicyNum = new javax.swing.JLabel();
        txtPolicyNum = new javax.swing.JTextField();
        btnFindInsurance = new javax.swing.JButton();
        txtInsuranceCompany = new javax.swing.JTextField();
        txtPolicyName = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        lblCoverage = new javax.swing.JLabel();
        txtCoverage = new javax.swing.JTextField();
        rbtnOther = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        txtPatientIdentifier = new javax.swing.JTextField();
        btnResetPolicyNum = new javax.swing.JButton();
        btnViewOnMap = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        passwordJTextField = new javax.swing.JPasswordField();
        jLabel11 = new javax.swing.JLabel();
        rePasswordJTextField = new javax.swing.JPasswordField();
        btnUpdate = new javax.swing.JButton();
        btnTakePicture = new javax.swing.JButton();
        personImageLabels = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(64, 123, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("CREATE APPOINTMENT");

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(64, 123, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Already registered? Provide SSN : ");

        btnFindPatients.setBackground(new java.awt.Color(153, 0, 0));
        btnFindPatients.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnFindPatients.setForeground(new java.awt.Color(255, 255, 255));
        btnFindPatients.setText("Find Patient");
        btnFindPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPatientsActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(64, 123, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Date :");

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("PATIENT INFORMATION");

        jLabel7.setBackground(new java.awt.Color(64, 123, 255));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("First Name :");

        jLabel8.setBackground(new java.awt.Color(64, 123, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Address:");

        jLabel10.setBackground(new java.awt.Color(64, 123, 255));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Last Name :");

        jLabel17.setBackground(new java.awt.Color(64, 123, 255));
        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setText("SSN :");

        txtHomePhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHomePhoneActionPerformed(evt);
            }
        });

        jLabel18.setBackground(new java.awt.Color(64, 123, 255));
        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("Phone Number :");

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        jLabel24.setBackground(new java.awt.Color(64, 123, 255));
        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel24.setText("Age :");

        jLabel25.setBackground(new java.awt.Color(64, 123, 255));
        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel25.setText("Sex :");

        rbtnMale.setBackground(new java.awt.Color(204, 255, 204));
        buttonGroup1.add(rbtnMale);
        rbtnMale.setForeground(new java.awt.Color(64, 123, 255));
        rbtnMale.setText("M");
        rbtnMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnMaleActionPerformed(evt);
            }
        });

        rbtnFemale.setBackground(new java.awt.Color(204, 255, 204));
        buttonGroup1.add(rbtnFemale);
        rbtnFemale.setForeground(new java.awt.Color(64, 123, 255));
        rbtnFemale.setText("F");
        rbtnFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnFemaleActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(64, 123, 255));
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("INSURANCE INFORMATION");

        rbtnPatientInsuranceYes.setBackground(new java.awt.Color(204, 255, 204));
        rbtnPatientInsuranceYes.setForeground(new java.awt.Color(64, 123, 255));
        rbtnPatientInsuranceYes.setText("Yes");
        rbtnPatientInsuranceYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnPatientInsuranceYesActionPerformed(evt);
            }
        });

        rbtnPatientInsuranceNo.setBackground(new java.awt.Color(204, 255, 204));
        rbtnPatientInsuranceNo.setForeground(new java.awt.Color(64, 123, 255));
        rbtnPatientInsuranceNo.setText("No");
        rbtnPatientInsuranceNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnPatientInsuranceNoActionPerformed(evt);
            }
        });

        lblHavePolicy.setBackground(new java.awt.Color(64, 123, 255));
        lblHavePolicy.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHavePolicy.setText("Is this patient covered by Insurance");

        lblPolicyName.setBackground(new java.awt.Color(64, 123, 255));
        lblPolicyName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPolicyName.setText("Policy Name :");

        lblInsCompany.setBackground(new java.awt.Color(64, 123, 255));
        lblInsCompany.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInsCompany.setText("Insurance Company :");

        btnCreate.setBackground(new java.awt.Color(153, 0, 0));
        btnCreate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        jLabel34.setBackground(new java.awt.Color(64, 123, 255));
        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel34.setText("Reason for Visit:");

        jScrollPane1.setBackground(new java.awt.Color(255, 102, 204));

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        lblPolicyNum.setBackground(new java.awt.Color(64, 123, 255));
        lblPolicyNum.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPolicyNum.setText("Provide Insurance Policy Number:");

        txtPolicyNum.setEnabled(false);

        btnFindInsurance.setBackground(new java.awt.Color(255, 102, 204));
        btnFindInsurance.setText("Find Policy");
        btnFindInsurance.setEnabled(false);
        btnFindInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindInsuranceActionPerformed(evt);
            }
        });

        lblCoverage.setBackground(new java.awt.Color(64, 123, 255));
        lblCoverage.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblCoverage.setText("Patient Insurance Coverage % :");

        rbtnOther.setBackground(new java.awt.Color(204, 255, 204));
        buttonGroup1.add(rbtnOther);
        rbtnOther.setForeground(new java.awt.Color(64, 123, 255));
        rbtnOther.setText("Other");

        jLabel4.setBackground(new java.awt.Color(64, 123, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Patient ID / Visit ID :");

        txtPatientIdentifier.setEditable(false);

        btnResetPolicyNum.setBackground(new java.awt.Color(153, 0, 0));
        btnResetPolicyNum.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnResetPolicyNum.setForeground(new java.awt.Color(255, 255, 255));
        btnResetPolicyNum.setText("Reset Policy Number");
        btnResetPolicyNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetPolicyNumActionPerformed(evt);
            }
        });

        btnViewOnMap.setBackground(new java.awt.Color(153, 0, 0));
        btnViewOnMap.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnViewOnMap.setForeground(new java.awt.Color(255, 255, 255));
        btnViewOnMap.setText("View On Map");
        btnViewOnMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOnMapActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(64, 123, 255));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Email :");

        jLabel12.setBackground(new java.awt.Color(64, 123, 255));
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Username:");

        nameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameJTextFieldActionPerformed(evt);
            }
        });

        jLabel13.setBackground(new java.awt.Color(64, 123, 255));
        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setText("Password:");

        jLabel11.setBackground(new java.awt.Color(64, 123, 255));
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("re-Enter Password:");

        btnUpdate.setBackground(new java.awt.Color(153, 0, 0));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnTakePicture.setBackground(new java.awt.Color(153, 0, 0));
        btnTakePicture.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnTakePicture.setForeground(new java.awt.Color(255, 255, 255));
        btnTakePicture.setText("Take Picture");
        btnTakePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTakePictureActionPerformed(evt);
            }
        });

        personImageLabels.setBackground(new java.awt.Color(255, 102, 204));

        btnSave.setBackground(new java.awt.Color(153, 0, 0));
        btnSave.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(9, 9, 9)
                                        .addComponent(txtPatientSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnFindPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(77, 77, 77)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtPatientIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(47, 47, 47))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(185, 185, 185)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)))
                        .addGap(102, 102, 102))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPolicyNum)
                                .addGap(2, 2, 2)
                                .addComponent(txtPolicyNum, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFindInsurance, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnResetPolicyNum, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(261, 261, 261)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel25)
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(64, 64, 64)
                                                .addComponent(rbtnOther))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addComponent(rbtnMale))
                                            .addComponent(rbtnFemale)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(11, 11, 11)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnViewOnMap, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(23, 23, 23)
                                            .addComponent(jLabel7))
                                        .addComponent(jLabel18))
                                    .addGap(2, 2, 2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtHomePhone, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel10)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(lblCoverage)
                                    .addGap(5, 5, 5)
                                    .addComponent(txtCoverage, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(13, 13, 13)
                                    .addComponent(jLabel34)
                                    .addGap(10, 10, 10)
                                    .addComponent(txtReasonForVisit))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(70, 70, 70)
                                    .addComponent(lblInsCompany)
                                    .addGap(11, 11, 11)
                                    .addComponent(txtInsuranceCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(33, 33, 33)
                                    .addComponent(lblPolicyName)
                                    .addGap(8, 8, 8)
                                    .addComponent(txtPolicyName, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblHavePolicy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtnPatientInsuranceYes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtnPatientInsuranceNo))
                            .addComponent(jLabel9)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(passwordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(136, 136, 136)
                                .addComponent(jLabel12)))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rePasswordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addComponent(btnUpdate)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(personImageLabels, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnTakePicture, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)))
                        .addGap(227, 227, 227))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(78, 78, 78))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSave, btnTakePicture});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCreate, btnUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnBack)))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(txtPatientSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnFindPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatientIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(26, 26, 26)
                        .addComponent(jLabel6)
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel7)
                                .addGap(23, 23, 23)
                                .addComponent(jLabel18))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)
                                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtHomePhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(3, 3, 3)
                                            .addComponent(jLabel25))
                                        .addComponent(rbtnOther)
                                        .addComponent(rbtnMale)
                                        .addComponent(rbtnFemale))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(btnTakePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(personImageLabels, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnViewOnMap, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addComponent(jLabel9)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnPatientInsuranceYes)
                    .addComponent(rbtnPatientInsuranceNo)
                    .addComponent(lblHavePolicy))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPolicyNum)
                            .addComponent(txtPolicyNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnFindInsurance, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnResetPolicyNum, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInsCompany)
                    .addComponent(txtInsuranceCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPolicyName)
                    .addComponent(txtPolicyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCoverage)
                    .addComponent(txtCoverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(txtReasonForVisit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(rePasswordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(42, 42, 42))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCreate, btnUpdate});

    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        AccountantWorkArea dwjp = (AccountantWorkArea) component;
        dwjp.populateAllPatientsTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnFindPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPatientsActionPerformed
        btnUpdate.setEnabled(true);
        btnTakePicture.setEnabled(true);
        btnSave.setEnabled(true);
        boolean isPatientFound = false;
        String ssn = txtPatientSSN.getText().trim();
        List<NetworkSystem> networks = ecosystem.getNetworkSystems();
        List<HealthCareEnterprise> healthCenterEnterprises = new ArrayList<>();

        for (NetworkSystem network : networks) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof HealthCareEnterprise) {
                    healthCenterEnterprises.add((HealthCareEnterprise) enterprise);
                }
            }
        }

        for (HealthCareEnterprise healthCenterEnterprise : healthCenterEnterprises) {
            List<Patient> patients = healthCenterEnterprise.getPatientDirectory().getPatientList();
            for (Patient patient : patients) {
                if (patient.getSSN().equals(ssn)) {
                    cus = patient;
                    autopopulateFields(patient);
                    isPatientFound = true;
                }

            }
        }

        if (!isPatientFound) {
            JOptionPane.showMessageDialog(null, "No patient Found");
        }

    }//GEN-LAST:event_btnFindPatientsActionPerformed

    private void txtHomePhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHomePhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHomePhoneActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void rbtnMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnMaleActionPerformed

    private void rbtnFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnFemaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnFemaleActionPerformed

    private void rbtnPatientInsuranceYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnPatientInsuranceYesActionPerformed
        lblPolicyNum.setEnabled(true);
        btnFindInsurance.setEnabled(true);
        txtPolicyNum.setEnabled(true);
    }//GEN-LAST:event_rbtnPatientInsuranceYesActionPerformed

    private void rbtnPatientInsuranceNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnPatientInsuranceNoActionPerformed
        lblPolicyNum.setEnabled(false);
        btnFindInsurance.setEnabled(false);
        txtPolicyNum.setEnabled(false);
        txtInsuranceCompany.setEnabled(false);
        txtPolicyName.setEnabled(false);

        txtCoverage.setEnabled(false);

        lblCoverage.setEnabled(false);
        lblInsCompany.setEnabled(false);

        lblPolicyName.setEnabled(false);
    }//GEN-LAST:event_rbtnPatientInsuranceNoActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed

        btnUpdate.setEnabled(false);
        if (txtFirstName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide first name");
            return;
        }
        if (txtLastName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide last name");
            return;
        }
        if (buttonGroup1.isSelected(null)) {
            JOptionPane.showMessageDialog(null, "Please select gender");
            return;
        }
        if (txtHomePhone.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide phone");
            return;
        }
        if (txtSSN.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide SSN");
            return;
        }
        if (txtAge.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide age");
            return;
        }
        if (txtAddress.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide address");
            return;
        }
        if (txtEmail.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide email id");
            return;
        }

        if (buttonGroup1.isSelected(null)) {
            JOptionPane.showMessageDialog(null, "Please choose if Patient covered by Insurance");
            return;
        }

        if (txtReasonForVisit.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide Reason for visit");
            return;

        } else {

            String registrationDate = txtDate.getText().trim();
            String username = nameJTextField.getText();
            String password = String.valueOf(passwordJTextField.getPassword());
            String rePassword = String.valueOf(rePasswordJTextField.getPassword());
            String firstName = txtFirstName.getText().trim();
            String lastName = txtLastName.getText().trim();
            String gender = "Male";
            if (rbtnFemale.isSelected()) {
                gender = "Female";
            } else if (rbtnOther.isSelected()) {
                gender = "Other";
            }

            String phoneNo = txtHomePhone.getText().trim();

            if (!phonePatternCorrect()) {
                JOptionPane.showMessageDialog(null, "/* Following are valid phone number examples */             \n"
                        + "              \"1234567890\", \"123-456-7890\", \"(123)4567890\", \"(123)456-7890\",\n"
                        + "              /* Following are invalid phone numbers */ \n"
                        + "              \"(1234567890)\",\"123)4567890\", \"12345678901\", \"(1)234567890\",");
                txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.RED));

                return;
            }

            if (phonePatternCorrect()) {
                txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.GRAY));

            }

            if (!emailPatternCheck()) {
                JOptionPane.showMessageDialog(null, "Please enter a valid email Id");
                txtEmail.setBorder(BorderFactory.createLineBorder(Color.RED));

                return;
            }

            String email = txtEmail.getText().trim();

            if (emailPatternCheck()) {
                txtEmail.setBorder(BorderFactory.createLineBorder(Color.GRAY));

            }

            String ssn = txtSSN.getText().trim();

            if (!ssnPatternCheck()) {
                JOptionPane.showMessageDialog(null, "/* United States Social Security numbers are nine-digit numbers in the format AAA-GG-SSSS with following rules. */             \n"
                        + "              \"The first three digits called the area number. The area number cannot be 000, 666, or between 900 and 999\",\n"
                        + "                \" Digits four and five are called the group number and range from 01 to 99\",\n"
                        + "              \"The last four digits are serial numbers from 0001 to 9999.\"");
                txtSSN.setBorder(BorderFactory.createLineBorder(Color.RED));

                return;
            }

            if (ssnPatternCheck()) {
                txtSSN.setBorder(BorderFactory.createLineBorder(Color.GRAY));

            }

            String age = txtAge.getText().trim();

            try {
                Integer.parseInt(age);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please provide integer values in Age textfield");
                return;
            }

            String address = txtAddress.getText().trim();
            boolean hasInsurance = false;

            String policyNumber = txtPolicyNum.getText().trim();
            if (rbtnPatientInsuranceYes.isSelected()) {
                if (policyNumber.equals("")) {
                    JOptionPane.showMessageDialog(null, "Provide policy number");
                    return;
                }

                if (txtPolicyName.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "No Policy found, please provide correct policy number");
                    return;
                }
            }
            String insuranceCompany = String.valueOf(txtInsuranceCompany.getText());
            String policyName = String.valueOf(txtPolicyName.getText());
            String coverString = txtCoverage.getText().trim();
            double coverage = coverString.equals("") ? 0 : Double.parseDouble(txtCoverage.getText().trim());

            String reasonForVisit = txtReasonForVisit.getText().trim();

            if (hasInsurance) {
                if (txtPolicyNum.getText().equals("")) {
                    return;
                }
            }

            Insurance insurance = new Insurance(policyName, insuranceCompany, coverage);
            InsuranceCustomer insuranceCustomer = new InsuranceCustomer(insurance, policyNumber);
            PatientVisitJob patientTreatmentWorkRequest;
            HealthCareEnterprise HealthCareEnterprise = (HealthCareEnterprise) enterprise;
            if (cus == null) {
                Patient patient = new Patient();

                patient.setAppointmentDate(txtDate.getText());
                patient.setPatientID(txtPatientIdentifier.getText().trim());
                patient.setPatientFName(firstName);
                patient.setPatientLName(lastName);
                patient.setGender(gender);

                patient.setPhoneNumber(phoneNo);
                patient.setAge(age);
                patient.setSSN(ssn);
                patient.setAddress(address);
                patient.setPatientEmail(email);

                patient.setInsuranceCustomer(insuranceCustomer);

                HealthCareEnterprise.getPatientDirectory().getPatientList().add(patient);
                if (username == null || username.equals("")) {
                    nameJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
                    JOptionPane.showMessageDialog(null, "Username cannot be empty");
                    return;
                }

                if (password == null || password.equals("")) {
                    nameJTextField.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                    passwordJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
                    JOptionPane.showMessageDialog(null, "Password cannot be empty");
                    return;
                }

                if (!passwordPatternCorrect()) {
                    JOptionPane.showMessageDialog(null, "Password should be at least 6 Characters "
                            + "digits and a combination of number , uppercase letter, "
                            + "lowercase letter and Special characters are not allowed other than $, +, _");
                    passwordJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
                    return;
                }

                if (!password.equals(rePassword)) {
                    JOptionPane.showMessageDialog(null, "Passwords don't match");
                    passwordJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
                    rePasswordJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
                    return;
                } else {

                    List<Account> userAccountList = ecosystem.getUserAccountDirectory().getUserAccountList();
                    for (Account userAccount : userAccountList) {
                        if (userAccount.getUsername().equals(username)) {
                            JOptionPane.showMessageDialog(null, "username already taken!!");
                            nameJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
                            return;
                        }
                    }
                }
                Account userAccount = ecosystem.getUserAccountDirectory().createUserAccount(username, password, patient, new PatientRole());
                patient.setUserAccount(userAccount);
                patientTreatmentWorkRequest = new PatientVisitJob(registrationDate, reasonForVisit, patient);
            } //create user ends
            else {
                patientTreatmentWorkRequest = new PatientVisitJob(registrationDate, reasonForVisit, cus);
            }
            patientTreatmentWorkRequest.setStatus("Waiting for Doctor");
            //   patientTreatmentWorkRequest.setSender(userAccount);

            Org org = null;
            for (Org organization : enterprise.getOrgDirectory().getOrganizations()) {
                if (organization instanceof DoctorOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getJobQueue().getJobRequestList().add(patientTreatmentWorkRequest);
                account.getJobQueue().getJobRequestList().add(patientTreatmentWorkRequest);
                refresh();
                JOptionPane.showMessageDialog(null, "Patient Registered Successfully");
                passwordJTextField.setText("");
                rePasswordJTextField.setText("");
                nameJTextField.setText("");

                personImageLabels.setIcon(null);

                btnTakePicture.setEnabled(false);
                btnSave.setEnabled(false);
            }

        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnFindInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindInsuranceActionPerformed
        String insurancePolicyNumber = txtPolicyNum.getText().trim();
        String ssn = txtSSN.getText().trim();
        List<InsuranceCompanyEnterprise> insuranceEnterprises = new ArrayList<>();
        InsuranceCustomer matchedCustomer = null;

        List<NetworkSystem> networks = ecosystem.getNetworkSystems();
        for (NetworkSystem network : networks) {
            for (Enterprise enterp : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterp instanceof InsuranceCompanyEnterprise) {
                    insuranceEnterprises.add((InsuranceCompanyEnterprise) enterp);
                }
            }
        }

        for (InsuranceCompanyEnterprise insuranceCompanyEnterprise : insuranceEnterprises) {
            List<InsuranceCustomer> insuranceCustomers = insuranceCompanyEnterprise.getInsuranceCustomerDirectory().getInsuranceCustomerList();
            for (InsuranceCustomer insuranceCustomer : insuranceCustomers) {
                if (insurancePolicyNumber.equals(insuranceCustomer.getInsurancePlanNumber()) && ssn.equals(insuranceCustomer.getSSN())) {
                    matchedCustomer = insuranceCustomer;

                }
            }
        }

        if (matchedCustomer != null) {
            txtInsuranceCompany.setText(matchedCustomer.getInsurance().getInsuranceCompany());
            txtPolicyName.setText(matchedCustomer.getInsurance().getPlanName());
            //  txtPolicyNo.setText(matchedCustomer.getInsurancePolicyNumber());
            txtCoverage.setText(String.valueOf(matchedCustomer.getInsurance().getReimbursement()));
            txtPolicyNum.setEnabled(false);
            txtSSN.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "Policy number does not match with provided SSN");
            txtInsuranceCompany.setText("");
            txtPolicyName.setText("");
            txtCoverage.setText("");
            txtPolicyNum.setText("");
            return;
        }
    }//GEN-LAST:event_btnFindInsuranceActionPerformed

    private void btnResetPolicyNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetPolicyNumActionPerformed
        txtPolicyNum.setEnabled(true);
        txtSSN.setEnabled(true);
        txtPolicyNum.setText("");
        txtPolicyName.setText("");
        txtInsuranceCompany.setText("");
        txtCoverage.setText("");
    }//GEN-LAST:event_btnResetPolicyNumActionPerformed

    private void btnViewOnMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOnMapActionPerformed
        // TODO add your handling code here:

        if (txtAddress.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter address first");
        } else {
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    MapViewer browser = new MapViewer();
                    browser.setVisible(true);
                    browser.loadURL("https://www.google.com/maps/search/?api=1&query=" + txtAddress.getText().trim());
                }
            });
        }

    }//GEN-LAST:event_btnViewOnMapActionPerformed

    private void nameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameJTextFieldActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        nameJTextField.setEnabled(false);
        passwordJTextField.setEnabled(false);
        rePasswordJTextField.setEnabled(false);
        txtSSN.setEnabled(false);
        txtPatientSSN.setEnabled(false);
        txtPatientIdentifier.setEnabled(false);
        btnCreate.setEnabled(false);
        if (cus == null) {
            JOptionPane.showMessageDialog(null, "Cannot update customer");
        } else {
            if (txtFirstName.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide first name");
                return;
            }
            if (txtLastName.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide last name");
                return;
            }
            if (buttonGroup1.isSelected(null)) {
                JOptionPane.showMessageDialog(null, "Please select gender");
                return;
            }
            if (txtHomePhone.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide phone");
                return;
            }
            if (txtSSN.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide SSN");
                return;
            }
            if (txtAge.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide age");
                return;
            }
            if (txtAddress.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide address");
                return;
            }

            if (txtEmail.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide email");
                return;
            } else {

                String registrationDate = txtDate.getText().trim();

                String firstName = txtFirstName.getText().trim();
                String lastName = txtLastName.getText().trim();
                String email = txtEmail.getText().trim();
                String gender = "Male";
                if (rbtnFemale.isSelected()) {
                    gender = "Female";
                } else if (rbtnOther.isSelected()) {
                    gender = "Other";
                }

                String phoneNo = txtHomePhone.getText().trim();

                if (!phonePatternCorrect()) {
                    JOptionPane.showMessageDialog(null, "/* Following are valid phone number examples */             \n"
                            + "              \"1234567890\", \"123-456-7890\", \"(123)4567890\", \"(123)456-7890\",\n"
                            + "              /* Following are invalid phone numbers */ \n"
                            + "              \"(1234567890)\",\"123)4567890\", \"12345678901\", \"(1)234567890\",");
                    txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.RED));

                    return;
                }

                if (phonePatternCorrect()) {
                    txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.GRAY));

                }

                if (!emailPatternCheck()) {
                    JOptionPane.showMessageDialog(null, "Please enter a valid email Id");
                    txtEmail.setBorder(BorderFactory.createLineBorder(Color.RED));

                    return;
                }

                if (emailPatternCheck()) {
                    txtEmail.setBorder(BorderFactory.createLineBorder(Color.GRAY));

                }

                String age = txtAge.getText().trim();

                try {
                    Integer.parseInt(age);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please provide integer values in Age textfield");
                    return;
                }

                String address = txtAddress.getText().trim();

                cus.setAppointmentDate(txtDate.getText());
                cus.setPatientFName(firstName);
                cus.setPatientLName(lastName);
                cus.setGender(gender);
                cus.setPhoneNumber(phoneNo);
                cus.setAge(age);
                cus.setAddress(address);
                cus.setPatientEmail(email);
                btnUpdate.setEnabled(false);
                btnTakePicture.setEnabled(false);
                btnSave.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Customer Information Updated Successfully!");
            }
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnTakePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTakePictureActionPerformed
        // TODO add your handling code here:
        JButton btnGo = new JButton("Capture");
        String filepath = "/userinterface/";
//            try{
        Webcam webcam = Webcam.getDefault();
        webcam.setViewSize(WebcamResolution.VGA.getSize());

        WebcamPanel panel = new WebcamPanel(webcam);
        panel.setFPSDisplayed(true);
        panel.setDisplayDebugInfo(true);
        panel.setImageSizeDisplayed(true);
        panel.setMirrored(true);

        JFrame window = new JFrame("Camera capture ");
        window.add(panel);
        window.add(btnGo, BorderLayout.SOUTH);
        btnGo.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                //                Properties pro = getProperties();
                //                filePath = pro.getProperty("RobotWorkPlace")+"CamPic/Pic";
                //                filePath = getClass().getResource()
                WebcamUtils.capture(webcam, txtPatientIdentifier.getText() + ".jpg");
                //BufferedImage image = webcam.getImage();
                JOptionPane.showMessageDialog(null, "Image taken");
                webcam.close();

            }
        }
        );
        window.setResizable(true);
        //        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.pack();
        window.setLocationRelativeTo(null);
        window.setVisible(true);
//            }
//            catch(Exception e)
//            {
//            JOptionPane.showMessageDialog(null,"Error writing file");
//            return;
//            }
    }//GEN-LAST:event_btnTakePictureActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String Path;
        Path = txtPatientIdentifier.getText() + ".jpg";
        ImageIcon icon = new ImageIcon(Path);
        Image img = icon.getImage();
        Image imagescaled = img.getScaledInstance(180, 160, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imagescaled);
        personImageLabels.setIcon(scaledIcon);
    }//GEN-LAST:event_btnSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnFindInsurance;
    private javax.swing.JButton btnFindPatients;
    private javax.swing.JButton btnResetPolicyNum;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnTakePicture;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewOnMap;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCoverage;
    private javax.swing.JLabel lblHavePolicy;
    private javax.swing.JLabel lblInsCompany;
    private javax.swing.JLabel lblPolicyName;
    private javax.swing.JLabel lblPolicyNum;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JPasswordField passwordJTextField;
    private javax.swing.JLabel personImageLabels;
    private javax.swing.JRadioButton rbtnFemale;
    private javax.swing.JRadioButton rbtnMale;
    private javax.swing.JRadioButton rbtnOther;
    private javax.swing.JRadioButton rbtnPatientInsuranceNo;
    private javax.swing.JRadioButton rbtnPatientInsuranceYes;
    private javax.swing.JPasswordField rePasswordJTextField;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCoverage;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtHomePhone;
    private javax.swing.JTextField txtInsuranceCompany;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPatientIdentifier;
    private javax.swing.JTextField txtPatientSSN;
    private javax.swing.JTextField txtPolicyName;
    private javax.swing.JTextField txtPolicyNum;
    private javax.swing.JTextField txtReasonForVisit;
    private javax.swing.JTextField txtSSN;
    // End of variables declaration//GEN-END:variables
    private void populateField() {
        LocalDateTime localTimeUpdate = LocalDateTime.now();
        DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ss");
        txtDate.setText(localTimeUpdate.format(dateTimeFormat));

        txtPatientIdentifier.setText(patientId);

        //lblPolicyNum.setEnabled(false);
        btnFindInsurance.setEnabled(false);
        txtPolicyNum.setEnabled(false);
        txtInsuranceCompany.setEnabled(false);
        txtPolicyName.setEnabled(false);

        txtCoverage.setEnabled(false);

        //lblCoverage.setEnabled(false);
        //lblInsCompany.setEnabled(false);
        //lblPolicyName.setEnabled(false);
    }

    private void refresh() {

        txtPatientIdentifier.setText(UUID.randomUUID().toString().substring(0, 7));
        txtFirstName.setText("");
        txtLastName.setText("");
        txtHomePhone.setText("");
        txtAge.setText("");
        txtSSN.setText("");
        txtAddress.setText("");
        txtReasonForVisit.setText("");
        txtEmail.setText("");
        txtPolicyName.setText("");
        txtPolicyNum.setText("");
        txtCoverage.setText("");
        txtInsuranceCompany.setText("");
    }

    private boolean phonePatternCorrect() {

        Pattern pattern = Pattern.compile("\\d{10}|(?:\\d{3}-){2}\\d{4}|\\(\\d{3}\\)\\d{3}-?\\d{4}");
        Matcher matcher = pattern.matcher(txtHomePhone.getText());

        boolean b = false;

        if (matcher.matches()) {
            b = true;
        } else {
            b = false;
        }

        return b;
    }

    private boolean ssnPatternCheck() {

        Pattern pattern = Pattern.compile("^(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$");
        Matcher matcher = pattern.matcher(txtSSN.getText());

        boolean b = false;

        if (matcher.matches()) {
            b = true;
        } else {
            b = false;
        }

        return b;
    }

    private boolean emailPatternCheck() {

        Pattern pattern = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$", Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(txtEmail.getText());

        boolean b = false;

        if (matcher.matches()) {
            b = true;
        } else {
            b = false;
        }

        return b;
    }

    private boolean passwordPatternCorrect() {
        Pattern p = Pattern.compile("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$+_])(?=\\S+$).{6,}$");
        Matcher m = p.matcher(String.valueOf(passwordJTextField.getPassword()));
        boolean b = m.matches();
        return b;
    }

    private void autopopulateFields(Patient patient) {
        txtFirstName.setText(patient.getPatientFName());
        txtLastName.setText(patient.getPatientLName());
        txtPatientIdentifier.setText(patient.getPatientID());
        txtHomePhone.setText(patient.getPhoneNumber());
        txtSSN.setText(patient.getSSN());
        txtAge.setText(patient.getAge());
        txtAddress.setText(patient.getAddress());
        txtEmail.setText(patient.getPatientEmail());
        try {
            nameJTextField.setText(patient.getUserAccount().getUsername());
            passwordJTextField.setText(patient.getUserAccount().getPassword());
            rePasswordJTextField.setText(patient.getUserAccount().getPassword());
        } catch (Exception exc) {
            nameJTextField.setEnabled(false);
            passwordJTextField.setEnabled(false);
            rePasswordJTextField.setEnabled(false);
        }

        String Path;
        Path = txtPatientIdentifier.getText() + ".jpg";
        ImageIcon icon = new ImageIcon(Path);
        Image img = icon.getImage();
        Image imagescaled = img.getScaledInstance(180, 160, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imagescaled);
        personImageLabels.setIcon(scaledIcon);

        String sex = patient.getGender();

        if (sex.equals("Male")) {
            rbtnMale.setSelected(true);
        } else if (sex.equals("Female")) {
            rbtnFemale.setSelected(true);
        } else if (sex.equals("Other")) {
            rbtnOther.setSelected(true);
        }
        nameJTextField.setEnabled(false);
        passwordJTextField.setEnabled(false);
        rePasswordJTextField.setEnabled(false);
        txtSSN.setEnabled(false);
        txtPatientSSN.setEnabled(false);
        txtPatientIdentifier.setEnabled(false);

    }

}
