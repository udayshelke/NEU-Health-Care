package UI.DoctorRole;

import NUHealthCare.Account.Account;
import NUHealthCare.Enterprise.Enterprise;
import NUHealthCare.Org.DoctorOrg;
import NUHealthCare.Ecosystem;
import NUHealthCare.Account.Account;
import NUHealthCare.JobQueue.LabTestJob;
import NUHealthCare.JobQueue.PatientVisitJob;
import NUHealthCare.JobQueue.JobRequest;
import UI.HealthcareAccountant.CreateAppointmentJPanel;
import javax.swing.JPanel;

import java.awt.CardLayout;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Rishabh,Uday,Aditi
 */
public class DoctorWorkArea extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private DoctorOrg doctorOrg;
    private Enterprise enterprise;
    private Account account;
  /**
   * Creates new form DoctorWorkArea
   */
  public DoctorWorkArea(JPanel userProcessContainer, Account account, DoctorOrg org, Enterprise enterprise) {
    initComponents();
    
        this.userProcessContainer = userProcessContainer;
        this.doctorOrg = org;
        this.enterprise = enterprise;
        this.account = account;
        lblValue.setText(enterprise.getOrgName());
        populateRequestTable();
  }
public void populateRequestTable() {

        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (JobRequest request : doctorOrg.getJobQueue().getJobRequestList()) {
            Object[] row = new Object[8];
            row[0] = ((PatientVisitJob) request).getRegDate();
            row[1] = String.valueOf(((PatientVisitJob) request).getPatient().getPatientID());
            row[2] = ((PatientVisitJob) request).getPatient().getPatientFName() + " " + ((PatientVisitJob) request).getPatient().getPatientLName();
            row[3] = ((PatientVisitJob) request);
            row[4] = ((PatientVisitJob) request).getAssignedDoctor();
            row[5] = ((PatientVisitJob) request).getLabAssistant();
            row[6] = ((PatientVisitJob) request).getLabResult();
            row[7] = request.getStatus();

            model.addRow(row);
//            if(patientToLab.get((PatientVisitWorkRequest)request) == null)
//            {
//                patientToLab.put((PatientVisitWorkRequest)request, null);
//            }

        }
    }
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        btnRequestTest = new javax.swing.JButton();
        lblEnterprise = new javax.swing.JLabel();
        lblValue = new javax.swing.JLabel();
        blSubTitle = new javax.swing.JLabel();
        btnAssignToMe = new javax.swing.JButton();
        btnProvidePrescription = new javax.swing.JButton();
        btnComplete = new javax.swing.JButton();
        btnViewPatient = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        workRequestJTable.setBackground(new java.awt.Color(204, 204, 204));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Registration Date", "Patient Id", "Patient Name", "Illness", "Assigned Doctor", "Lab Assistant", "Lab Result", "Treatment Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        btnRequestTest.setBackground(new java.awt.Color(153, 0, 0));
        btnRequestTest.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRequestTest.setForeground(new java.awt.Color(255, 255, 255));
        btnRequestTest.setText("Request Lab Test");
        btnRequestTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestTestActionPerformed(evt);
            }
        });

        lblEnterprise.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEnterprise.setText("EnterPrise :");

        lblValue.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblValue.setText("<value>");

        blSubTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        blSubTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        blSubTitle.setText("Medical Test Work Queue");

        btnAssignToMe.setBackground(new java.awt.Color(153, 0, 0));
        btnAssignToMe.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAssignToMe.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignToMe.setText("Assign To Me");
        btnAssignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMeActionPerformed(evt);
            }
        });

        btnProvidePrescription.setBackground(new java.awt.Color(153, 0, 0));
        btnProvidePrescription.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnProvidePrescription.setForeground(new java.awt.Color(255, 255, 255));
        btnProvidePrescription.setText("Provide Prescription");
        btnProvidePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProvidePrescriptionActionPerformed(evt);
            }
        });

        btnComplete.setBackground(new java.awt.Color(153, 0, 0));
        btnComplete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnComplete.setForeground(new java.awt.Color(255, 255, 255));
        btnComplete.setText("Complete Treatment");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });

        btnViewPatient.setBackground(new java.awt.Color(153, 0, 0));
        btnViewPatient.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnViewPatient.setForeground(new java.awt.Color(255, 255, 255));
        btnViewPatient.setText("View Patient");
        btnViewPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPatientActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Doctor Work Area");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/Assets/NU_Health_footer.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1210, Short.MAX_VALUE)
            .addComponent(blSubTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(lblEnterprise)
                .addGap(6, 6, 6)
                .addComponent(lblValue, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1009, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(btnViewPatient)
                        .addGap(18, 18, 18)
                        .addComponent(btnAssignToMe)
                        .addGap(18, 18, 18)
                        .addComponent(btnRequestTest)
                        .addGap(18, 18, 18)
                        .addComponent(btnProvidePrescription)
                        .addGap(18, 18, 18)
                        .addComponent(btnComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(93, 93, 93))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAssignToMe, btnComplete, btnProvidePrescription, btnRequestTest, btnViewPatient});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(lblTitle)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lblValue, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(blSubTitle)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssignToMe, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRequestTest, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProvidePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAssignToMe, btnComplete, btnProvidePrescription, btnRequestTest, btnViewPatient});

    }// </editor-fold>//GEN-END:initComponents

    private void btnRequestTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestTestActionPerformed
         int selectedRow = workRequestJTable.getSelectedRow();
        PatientVisitJob workRequest;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {
            workRequest = (PatientVisitJob) workRequestJTable.getValueAt(selectedRow, 3);
            if (workRequest.getAssignedDoctor() != null) {
                if (account.equals(workRequest.getAssignedDoctor())) {
                    if (workRequest.getStatus().equalsIgnoreCase("Under Consultation")) {

                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        userProcessContainer.add("RequestLabTestJPanel", new RequestLabTestsJPanel(userProcessContainer, account, enterprise, workRequest));
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "Can not create the Lab request as the current status is " + workRequest.getStatus());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Not Authorised");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please assign the request first");
            }
        }
    }//GEN-LAST:event_btnRequestTestActionPerformed

    private void btnAssignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMeActionPerformed
   int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {

            JobRequest patientTreatmentWorkRequest = (PatientVisitJob) workRequestJTable.getValueAt(selectedRow, 3);
            if (((PatientVisitJob) patientTreatmentWorkRequest).getAssignedDoctor() == null) {

                if (patientTreatmentWorkRequest.getStatus().equalsIgnoreCase("Waiting for Doctor")) {
                    //patientTreatmentWorkRequest.setReceiver(userAccount);
                    ((PatientVisitJob) patientTreatmentWorkRequest).setAssignedDoctor(account);
                    patientTreatmentWorkRequest.setStatus("Under Consultation");
                    populateRequestTable();
                    JOptionPane.showMessageDialog(null, "Success !! Request is assigned to you ");
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot assign this patient as its current state is: " + patientTreatmentWorkRequest.getStatus());
                }

            } else {
                if(account.equals(((PatientVisitJob) patientTreatmentWorkRequest).getAssignedDoctor())) {
                 JOptionPane.showMessageDialog(null, "Request is already assigned to you");
                } else {
                    JOptionPane.showMessageDialog(null, "Not Authorized");
                }
            }
        }
    }//GEN-LAST:event_btnAssignToMeActionPerformed

    private void btnProvidePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProvidePrescriptionActionPerformed
         int selectedRow = workRequestJTable.getSelectedRow();
        PatientVisitJob workRequest;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {
            workRequest = (PatientVisitJob) workRequestJTable.getValueAt(selectedRow, 3);
            if(workRequest.getAssignedDoctor() != null)
            {
            if (account.equals(workRequest.getAssignedDoctor())) {
                if (workRequest.getStatus().equalsIgnoreCase("Lab Test Completed") || workRequest.getStatus().equalsIgnoreCase("Under Consultation")) {

                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    userProcessContainer.add("ProvidePrescriptionJPanel", new ProvidePrescriptionJPanel(userProcessContainer, account, enterprise, workRequest));
                    layout.next(userProcessContainer);
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot prescribe the Patient as the status is: " + workRequest.getStatus());
                }
            } else {

                JOptionPane.showMessageDialog(null, "Not Authorised");
            }
        }
            else {
                JOptionPane.showMessageDialog(null, "Please assign the request first");
            }
        }        
    }//GEN-LAST:event_btnProvidePrescriptionActionPerformed

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
      int selectedRow = workRequestJTable.getSelectedRow();
        PatientVisitJob workRequest;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {
            workRequest = (PatientVisitJob) workRequestJTable.getValueAt(selectedRow, 3);
            if(workRequest.getAssignedDoctor() != null)
            {
            if (account.equals(workRequest.getAssignedDoctor())) {
                if (workRequest.getStatus().equalsIgnoreCase("Prescription Provided")) {

                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    userProcessContainer.add("RequestBillingJPanel", new RequestBillingsJPanel(userProcessContainer, account, enterprise, workRequest));
                    layout.next(userProcessContainer);
                } else {
                    if(workRequest.getStatus().equalsIgnoreCase("Consultation Completed"))
                    {
                        JOptionPane.showMessageDialog(null, "Treatment is already complete!");
                    }
                    else
                    {
                    JOptionPane.showMessageDialog(null, "Cannot complete the treatment. Please provide Prescription first!");
                }
                }
            } else {

                JOptionPane.showMessageDialog(null, "Not Authorised");
            }
        }
            else {
                JOptionPane.showMessageDialog(null, "Please assign the request first");
            }
        }    
    }//GEN-LAST:event_btnCompleteActionPerformed

    private void btnViewPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPatientActionPerformed
      int selectedRow = workRequestJTable.getSelectedRow();
        PatientVisitJob patientVisitJob;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else {
            patientVisitJob = (PatientVisitJob) workRequestJTable.getValueAt(selectedRow, 3);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("ViewPatientJPanel", new ViewPatientsJPanel(userProcessContainer, account, enterprise, patientVisitJob));
            layout.next(userProcessContainer);
        }        
    }//GEN-LAST:event_btnViewPatientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel blSubTitle;
    private javax.swing.JButton btnAssignToMe;
    private javax.swing.JButton btnComplete;
    private javax.swing.JButton btnProvidePrescription;
    private javax.swing.JButton btnRequestTest;
    private javax.swing.JButton btnViewPatient;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEnterprise;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblValue;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
